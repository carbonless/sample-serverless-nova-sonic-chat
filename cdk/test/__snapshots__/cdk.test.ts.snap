// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test: MainStack 1`] = `
{
  "Description": "Serverless Nova Sonic Chat App (uksb-r1iyuqfyvk)",
  "Outputs": {
    "AgentAgentCoreRuntimeArn43CC4D6A": {
      "Value": {
        "Fn::GetAtt": [
          "AgentRuntime291C25AF",
          "AgentRuntimeArn",
        ],
      },
    },
    "AuthUserPoolClientId8216BF9A": {
      "Value": {
        "Ref": "AuthUserPoolClientC635291F",
      },
    },
    "AuthUserPoolDomainCE038363": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::GetAtt": [
                "AuthDomainPrefixE1742B23",
                "generated",
              ],
            },
            ".auth.us-east-1.amazoncognito.com",
          ],
        ],
      },
    },
    "AuthUserPoolIdC0605E59": {
      "Value": {
        "Ref": "AuthUserPool8115E87F",
      },
    },
    "DatabaseTableName64177828": {
      "Value": {
        "Ref": "DatabaseHistoryB38F26A4",
      },
    },
    "EventBusEventBusEndpoint97F69756": {
      "Description": "EventBus Endpoint URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "EventBusApi6E8C7C94",
                "Dns.Http",
              ],
            },
          ],
        ],
      },
    },
    "ServiceApiEndpointC0AA9658": {
      "Value": {
        "Fn::GetAtt": [
          "ServiceAD644FD0",
          "ApiEndpoint",
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AgentRole9D587F56": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "bedrock-agentcore.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AgentRoleDefaultPolicyA34CCA36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
              ],
              "Effect": "Allow",
              "Resource": "REDACTED",
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "xray:PutTelemetryRecords",
                "xray:PutTraceSegments",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:us-east-1:123456789012:log-group:/aws/bedrock-agentcore/runtimes/*",
            },
            {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "arn:aws:logs:us-east-1:123456789012:log-group:*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:us-east-1:123456789012:log-group:/aws/bedrock-agentcore/runtimes/*:log-stream:*",
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "ECRTokenAccess",
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "bedrock-agentcore",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "bedrock-agentcore:GetWorkloadAccessToken",
                "bedrock-agentcore:GetWorkloadAccessTokenForJWT",
                "bedrock-agentcore:GetWorkloadAccessTokenForUserId",
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:bedrock-agentcore:us-east-1:123456789012:workload-identity-directory/default",
                "arn:aws:bedrock-agentcore:us-east-1:123456789012:workload-identity-directory/default/workload-identity/agentName-*",
              ],
              "Sid": "GetAgentAccessToken",
            },
            {
              "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:bedrock:*::foundation-model/*",
                "arn:aws:bedrock:us-east-1:123456789012:*",
              ],
              "Sid": "BedrockModelInvocation",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DatabaseHistoryB38F26A4",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DatabaseHistoryB38F26A4",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "appsync:EventConnect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:appsync:us-east-1:123456789012:apis/",
                    {
                      "Fn::GetAtt": [
                        "EventBusApi6E8C7C94",
                        "ApiId",
                      ],
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "appsync:EventPublish",
                "appsync:EventSubscribe",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:appsync:us-east-1:123456789012:apis/",
                    {
                      "Fn::GetAtt": [
                        "EventBusApi6E8C7C94",
                        "ApiId",
                      ],
                    },
                    "/channelNamespace/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AgentRoleDefaultPolicyA34CCA36",
        "Roles": [
          {
            "Ref": "AgentRole9D587F56",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AgentRuntime291C25AF": {
      "DependsOn": [
        "AgentRoleDefaultPolicyA34CCA36",
        "AgentRole9D587F56",
      ],
      "Properties": {
        "AgentRuntimeArtifact": {
          "ContainerConfiguration": {
            "ContainerUri": {
              "Fn::Sub": "REDACTED",
            },
          },
        },
        "AgentRuntimeName": "TestMainStackAgent6DFB6D2A",
        "EnvironmentVariables": {
          "EVENT_API_ENDPOINT": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "EventBusApi6E8C7C94",
                    "Dns.Http",
                  ],
                },
              ],
            ],
          },
          "EVENT_BUS_NAMESPACE": "event-bus",
          "TABLE_NAME": {
            "Ref": "DatabaseHistoryB38F26A4",
          },
        },
        "NetworkConfiguration": {
          "NetworkMode": "PUBLIC",
        },
        "ProtocolConfiguration": "HTTP",
        "RoleArn": {
          "Fn::GetAtt": [
            "AgentRole9D587F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::BedrockAgentCore::Runtime",
    },
    "AuthBranding34BB87FD": {
      "Properties": {
        "ClientId": {
          "Ref": "AuthUserPoolClientC635291F",
        },
        "UseCognitoProvidedValues": true,
        "UserPoolId": {
          "Ref": "AuthUserPool8115E87F",
        },
      },
      "Type": "AWS::Cognito::ManagedLoginBranding",
    },
    "AuthDomainPrefixE1742B23": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceTimeout": "10",
        "ServiceToken": {
          "Fn::GetAtt": [
            "RandomStringGenerator11e9c903f11a4989833c985dddef5eb28C5103D0",
            "Arn",
          ],
        },
        "length": 10,
        "prefix": "webapp-",
      },
      "Type": "Custom::RandomString",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthPreSignupHandler006165C5": {
      "DependsOn": [
        "AuthPreSignupHandlerServiceRole0476C776",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "const allowedDomains = (process.env.ALLOWED_DOMAINS ?? '').split(',').filter((s) => !!s);

exports.handler = async function handler(event) {
  if (allowedDomains.length == 0) return event;

  const userEmailDomain = event.request.userAttributes.email.split('@')[1];
  if (!allowedDomains.includes(userEmailDomain)) {
    throw new Error(\`Invalid email domain: \${userEmailDomain}\`);
  }
  return event;
};
",
        },
        "Environment": {
          "Variables": {
            "ALLOWED_DOMAINS": "example.com",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AuthPreSignupHandlerServiceRole0476C776",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthPreSignupHandlerLogGroupCA54B127": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "AuthPreSignupHandler006165C5",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthPreSignupHandlerServiceRole0476C776": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthUserPool8115E87F": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": false,
        },
        "AutoVerifiedAttributes": [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "AuthPreSignupHandler006165C5",
              "Arn",
            ],
          },
        },
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UsernameAttributes": [
          "email",
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthUserPoolClientC635291F": {
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": [
          "http://localhost:3005/api/auth/sign-in-callback",
          {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "ServiceAD644FD0",
                    "ApiEndpoint",
                  ],
                },
                "/api/auth/sign-in-callback",
              ],
            ],
          },
        ],
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "IdTokenValidity": 1440,
        "LogoutURLs": [
          "http://localhost:3005/api/auth/sign-out-callback",
          {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "ServiceAD644FD0",
                    "ApiEndpoint",
                  ],
                },
                "/api/auth/sign-out-callback",
              ],
            ],
          },
        ],
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "TokenValidityUnits": {
          "IdToken": "minutes",
        },
        "UserPoolId": {
          "Ref": "AuthUserPool8115E87F",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "AuthUserPoolCognitoDomainAD9D79E1": {
      "Properties": {
        "Domain": {
          "Fn::GetAtt": [
            "AuthDomainPrefixE1742B23",
            "generated",
          ],
        },
        "ManagedLoginVersion": 2,
        "UserPoolId": {
          "Ref": "AuthUserPool8115E87F",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "AuthUserPoolPreSignUpCognito52504672": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthPreSignupHandler006165C5",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AuthUserPool8115E87F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2": {
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS",
        },
        "Cache": {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": "alias/aws/s3",
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:7.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleD95F32B9",
            "Arn",
          ],
        },
        "Source": {
          "BuildSpec": {
            "Fn::Join": [
              "",
              [
                "{
  "version": "0.2",
  "phases": {
    "build": {
      "commands": [
        "current_dir=$(pwd)",
        "echo \\"$input\\"",
        "mkdir workdir",
        "cd workdir",
        "aws s3 cp \\"$sourceS3Url\\" temp.zip",
        "unzip temp.zip",
        "ls -la",
        "aws ecr get-login-password | docker login --username AWS --password-stdin $repositoryAuthUri",
        "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws",
        "docker buildx ls",
        "echo \\"$buildCommand\\"",
        "eval \\"$buildCommand\\"",
        "docker images",
        "docker tag artifact:$imageTag ",
                {
                  "Fn::Select": [
                    4,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".dkr.ecr.",
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Ref": "ServiceBuildRepositoryB90C1AAE",
                },
                ":$imageTag",
        "docker push ",
                {
                  "Fn::Select": [
                    4,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".dkr.ecr.",
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Ref": "ServiceBuildRepositoryB90C1AAE",
                },
                ":$imageTag"
      ]
    },
    "post_build": {
      "commands": [
        "echo Build completed on \`date\`",
        "\\nSTATUS='SUCCESS'\\nif [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ] # Test if the build is failing\\nthen\\nSTATUS='FAILED'\\nREASON=\\"ContainerImageBuild failed. See CloudWatch Log stream for the detailed reason: \\nhttps://$AWS_REGION.console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/\\\\$252Faws\\\\$252Fcodebuild\\\\$252F$projectName/log-events/$CODEBUILD_LOG_PATH\\"\\nfi\\ncat <<EOF > payload.json\\n{\\n  \\"StackId\\": \\"$stackId\\",\\n  \\"RequestId\\": \\"$requestId\\",\\n  \\"LogicalResourceId\\":\\"$logicalResourceId\\",\\n  \\"PhysicalResourceId\\": \\"$imageTag\\",\\n  \\"Status\\": \\"$STATUS\\",\\n  \\"Reason\\": \\"$REASON\\",\\n  \\"Data\\": {\\n    \\"ImageTag\\": \\"$imageTag\\"\\n  }\\n}\\nEOF\\ncurl -v -i -X PUT -H 'Content-Type:' -d \\"@payload.json\\" \\"$responseURL\\"\\n              "
      ]
    }
  }
}",
              ],
            ],
          },
          "Type": "NO_SOURCE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleD95F32B9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleDefaultPolicyBD233B55": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:logs:us-east-1:123456789012:log-group:/aws/codebuild/",
                      {
                        "Ref": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
                      },
                      ":*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:logs:us-east-1:123456789012:log-group:/aws/codebuild/",
                      {
                        "Ref": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
                      },
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "codebuild:BatchPutCodeCoverages",
                "codebuild:BatchPutTestCases",
                "codebuild:CreateReport",
                "codebuild:CreateReportGroup",
                "codebuild:UpdateReport",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:codebuild:us-east-1:123456789012:report-group/",
                    {
                      "Ref": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
                    },
                    "-*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:CompleteLayerUpload",
                "ecr:DescribeImages",
                "ecr:GetDownloadUrlForLayer",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage",
                "ecr:UploadLayerPart",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ServiceBuildRepositoryB90C1AAE",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:GetObject*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::cdk-hnb659fds-assets-123456789012-us-east-1",
                "arn:aws:s3:::cdk-hnb659fds-assets-123456789012-us-east-1/*",
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleDefaultPolicyBD233B55",
        "Roles": [
          {
            "Ref": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleD95F32B9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseHistoryB38F26A4": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "GSI1PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "GSI1SK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "LSI1",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "GSI1",
            "KeySchema": [
              {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "GSI1SK",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "LocalSecondaryIndexes": [
          {
            "IndexName": "LSI1",
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "LSI1",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "Replicas": [
          {
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "GSI1",
              },
            ],
            "Region": "us-east-1",
          },
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "TTL",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::GlobalTable",
      "UpdateReplacePolicy": "Delete",
    },
    "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f306AEFF37": {
      "DependsOn": [
        "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleDefaultPolicyFECC51DC",
        "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleB008BAA4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-123456789012-us-east-1",
          "S3Key": "REDACTED",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleB008BAA4",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3LogGroupD6190314": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f306AEFF37",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleB008BAA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleDefaultPolicyFECC51DC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "codebuild:StartBuild",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleDefaultPolicyFECC51DC",
        "Roles": [
          {
            "Ref": "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f3ServiceRoleB008BAA4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EventBusApi6E8C7C94": {
      "Properties": {
        "EventConfig": {
          "AuthProviders": [
            {
              "AuthType": "AWS_IAM",
            },
            {
              "AuthType": "AMAZON_COGNITO_USER_POOLS",
              "CognitoConfig": {
                "AwsRegion": "us-east-1",
                "UserPoolId": {
                  "Ref": "AuthUserPool8115E87F",
                },
              },
            },
          ],
          "ConnectionAuthModes": [
            {
              "AuthType": "AWS_IAM",
            },
            {
              "AuthType": "AMAZON_COGNITO_USER_POOLS",
            },
          ],
          "DefaultPublishAuthModes": [
            {
              "AuthType": "AWS_IAM",
            },
            {
              "AuthType": "AMAZON_COGNITO_USER_POOLS",
            },
          ],
          "DefaultSubscribeAuthModes": [
            {
              "AuthType": "AWS_IAM",
            },
            {
              "AuthType": "AMAZON_COGNITO_USER_POOLS",
            },
          ],
        },
        "Name": "TestMainStackEventBusFE314BAE",
      },
      "Type": "AWS::AppSync::Api",
    },
    "EventBusNamespaceA69F015E": {
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "EventBusApi6E8C7C94",
            "ApiId",
          ],
        },
        "CodeS3Location": "s3://cdk-hnb659fds-assets-123456789012-us-east-1/333799e3b94d00cc500e9bbe85dc74235449f5c6c567d96be7935e6041188de0.mjs",
        "HandlerConfigs": {},
        "Name": "event-bus",
      },
      "Type": "AWS::AppSync::ChannelNamespace",
    },
    "RandomStringGenerator11e9c903f11a4989833c985dddef5eb28C5103D0": {
      "DependsOn": [
        "RandomStringGenerator11e9c903f11a4989833c985dddef5eb2ServiceRoleAB6B57A9",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');
const crypto = require('crypto');

exports.handler = async function (event, context) {
  try {
    console.log(event);
    if (event.RequestType == 'Delete') {
      return await response.send(event, context, response.SUCCESS);
    }

    const prefix = event.ResourceProperties.prefix ?? '';
    const length = event.ResourceProperties.length ?? '8';
    const generate = () => {
      const random = crypto.randomBytes(parseInt(length)).toString('hex');
      return \`\${prefix}\${random.slice(0, length)}\`;
    };

    if (event.RequestType == 'Create') {
      const generated = generate();
      return await response.send(event, context, response.SUCCESS, { generated }, generated);
    }
    if (event.RequestType == 'Update') {
      const current = event.PhysicalResourceId;
      if (current.startsWith(prefix)) {
        return await response.send(event, context, response.SUCCESS, { generated: current }, current);
      }
      const generated = generate();
      return await response.send(event, context, response.SUCCESS, { generated }, generated);
    }
  } catch (e) {
    console.log(e);
    await response.send(event, context, response.FAILED);
  }
};
",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "RandomStringGenerator11e9c903f11a4989833c985dddef5eb2ServiceRoleAB6B57A9",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "RandomStringGenerator11e9c903f11a4989833c985dddef5eb2LogGroup800F735B": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "RandomStringGenerator11e9c903f11a4989833c985dddef5eb28C5103D0",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RandomStringGenerator11e9c903f11a4989833c985dddef5eb2ServiceRoleAB6B57A9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceAD644FD0": {
      "Properties": {
        "Description": "nova sonic demo webapp",
        "Name": "Resource",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "ServiceANYproxy0DCF303D": {
      "Properties": {
        "ApiId": {
          "Ref": "ServiceAD644FD0",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "ANY /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "ServiceANYproxyIntegrationC8ECE7D5",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "ServiceANYproxyIntegrationC8ECE7D5": {
      "Properties": {
        "ApiId": {
          "Ref": "ServiceAD644FD0",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ServiceHandler5690CF9B",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "ServiceANYproxyIntegrationPermission9585156E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ServiceHandler5690CF9B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:us-east-1:123456789012:",
              {
                "Ref": "ServiceAD644FD0",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ServiceAccessLog9380C897": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ServiceBuild3C3E0A8A": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
        "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleDefaultPolicyBD233B55",
        "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd64RoleD95F32B9",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DeployTimeBuildCustomResourceHandlerdb740fd554364a848a09e6dfcd01f4f306AEFF37",
            "Arn",
          ],
        },
        "buildCommand": {
          "Fn::Join": [
            "",
            [
              "docker buildx build --build-arg SKIP_TS_BUILD=true --build-arg NEXT_PUBLIC_AWS_REGION=us-east-1 --build-arg NEXT_PUBLIC_EVENT_API_ENDPOINT=https://",
              {
                "Fn::GetAtt": [
                  "EventBusApi6E8C7C94",
                  "Dns.Http",
                ],
              },
              " --build-arg NEXT_PUBLIC_EVENT_BUS_NAMESPACE=event-bus --platform linux/amd64 --output type=docker,name=artifact:$imageTag --provenance=false .",
            ],
          ],
        },
        "codeBuildProjectName": {
          "Ref": "ContainerImageBuildAmd64e83729feb1564e709bec452b15847a30amd6491AAA9B2",
        },
        "repositoryUri": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  4,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "ServiceBuildRepositoryB90C1AAE",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ".dkr.ecr.",
              {
                "Fn::Select": [
                  3,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "ServiceBuildRepositoryB90C1AAE",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ".",
              {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              {
                "Ref": "ServiceBuildRepositoryB90C1AAE",
              },
            ],
          ],
        },
        "sourceS3Url": "s3://cdk-hnb659fds-assets-123456789012-us-east-1/REDACTED",
        "tagPrefix": "agent-",
        "type": "ContainerImageBuild",
      },
      "Type": "Custom::CDKContainerImageBuild",
      "UpdateReplacePolicy": "Delete",
    },
    "ServiceBuildRepositoryB90C1AAE": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "EmptyOnDelete": true,
        "RepositoryPolicyText": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Delete",
    },
    "ServiceDefaultStage3D16927A": {
      "Properties": {
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ServiceAccessLog9380C897",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "ApiId": {
          "Ref": "ServiceAD644FD0",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "ServiceHandler5690CF9B": {
      "DependsOn": [
        "ServiceHandlerServiceRoleDefaultPolicyEE1E9207",
        "ServiceHandlerServiceRole87BDFC5C",
      ],
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "ImageUri": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    4,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".dkr.ecr.",
                {
                  "Fn::Select": [
                    3,
                    {
                      "Fn::Split": [
                        ":",
                        {
                          "Fn::GetAtt": [
                            "ServiceBuildRepositoryB90C1AAE",
                            "Arn",
                          ],
                        },
                      ],
                    },
                  ],
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix",
                },
                "/",
                {
                  "Ref": "ServiceBuildRepositoryB90C1AAE",
                },
                ":",
                {
                  "Fn::GetAtt": [
                    "ServiceBuild3C3E0A8A",
                    "ImageTag",
                  ],
                },
              ],
            ],
          },
        },
        "Environment": {
          "Variables": {
            "AGENT_CORE_RUNTIME_ARN": {
              "Fn::GetAtt": [
                "AgentRuntime291C25AF",
                "AgentRuntimeArn",
              ],
            },
            "AMPLIFY_APP_ORIGIN": {
              "Fn::GetAtt": [
                "ServiceAD644FD0",
                "ApiEndpoint",
              ],
            },
            "COGNITO_DOMAIN": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "AuthDomainPrefixE1742B23",
                      "generated",
                    ],
                  },
                  ".auth.us-east-1.amazoncognito.com",
                ],
              ],
            },
            "TABLE_NAME": {
              "Ref": "DatabaseHistoryB38F26A4",
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "AuthUserPoolClientC635291F",
            },
            "USER_POOL_ID": {
              "Ref": "AuthUserPool8115E87F",
            },
          },
        },
        "MemorySize": 1769,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "ServiceHandlerServiceRole87BDFC5C",
            "Arn",
          ],
        },
        "Timeout": 29,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ServiceHandlerLogGroup0F6A2915": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ServiceHandler5690CF9B",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ServiceHandlerServiceRole87BDFC5C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceHandlerServiceRoleDefaultPolicyEE1E9207": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DatabaseHistoryB38F26A4",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DatabaseHistoryB38F26A4",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "bedrock-agentcore:InvokeAgentRuntime",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AgentRuntime291C25AF",
                    "AgentRuntimeArn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AgentRuntime291C25AF",
                          "AgentRuntimeArn",
                        ],
                      },
                      "/runtime-endpoint/DEFAULT",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ServiceHandlerServiceRoleDefaultPolicyEE1E9207",
        "Roles": [
          {
            "Ref": "ServiceHandlerServiceRole87BDFC5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
